// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id          String        @id @default(cuid())
  amount      Float
  currency    String
  status      PaymentStatus @default(PENDING)
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                            String         @id @default(cuid())
  name                          String
  username                      String         @unique
  profilePicture                String?
  email                         String         @unique
  emailVerified                 Boolean        @default(false)
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  passwordResetToken            String?
  passwordResetTokenExpires     DateTime?
  youtubeRefreshToken           String?
  dob                           DateTime?
  gender                        Gender?
  password                      String?
  bio                           String?
  location                      String?
  website                       String?
  youtubeLink                   String?
  instagramLink                 String?
  xLink                         String?
  skills                        String[]       @default([])
  readyToEdit                   Boolean        @default(false)
  requestEdit                   RequestEdit[]
  requestEditor                 RequestEditor[]
  rating                        Float          @default(0)
  createdProjects               Project[]      @relation("CreatorRelation")
  editedProjects                Project[]      @relation("EditorRelation")
  payments                      Payment[]
  notificationsfrom             Notification[] @relation("NotificationFromRelation")
  notificationsto               Notification[] @relation("NotificationToRelation")
  createdAt                     DateTime       @default(now())
  updatedAt                     DateTime       @updatedAt
}

model FileVersion {
  id        String   @id @default(cuid())
  version   Int
  name      String
  url       String
  projectId String
  project   Project  @relation("FileVersionRelation", fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThumbnailVersion {
  id        String   @id @default(cuid())
  version   Int
  name      String
  url       String
  projectId String
  project   Project  @relation("ThumbnailVersionRelation", fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InstructionNature {
  COMPULSORY
  OPTIONAL
}

enum InstructionStatus {
  PENDING
  COMPLETED
}

model Instructions {
  id          String            @id @default(cuid())
  content     String
  projectId   String
  project     Project           @relation("InstructionsRelation", fields: [projectId], references: [id])
  nature      InstructionNature @default(COMPULSORY)
  status      InstructionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model RequestEdit {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  editorId    String
  editor      User     @relation(fields: [editorId], references: [id])
  status      RequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RequestEditor {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  editorId    String
  editor      User     @relation(fields: [editorId], references: [id])
  status      RequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProjectType {
  VLOG
  SHORT_FILM
  COMMERCIAL
  MUSIC_VIDEO
  DOCUMENTARY
}

model Project {
  id           String             @id @default(cuid())
  title        String
  description  String
  type         ProjectType
  creator      User               @relation("CreatorRelation", fields: [creatorId], references: [id])
  creatorId    String
  editor       User?              @relation("EditorRelation", fields: [editorId], references: [id])
  editorId     String?
  duration     Int
  deadline     DateTime
  completed    Boolean            @default(false)
  FileVersion  FileVersion[]      @relation("FileVersionRelation")
  ThumbnailVersion    ThumbnailVersion[] @relation("ThumbnailVersionRelation")
  Instructions Instructions[]     @relation("InstructionsRelation")
  requests     RequestEdit[]      
  requestEditors RequestEditor[]
  Chat         Chat[]         
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  message     String
  fromUserId  String
  from        User     @relation("NotificationFromRelation", fields: [fromUserId], references: [id])
  toUserId    String
  to          User     @relation("NotificationToRelation", fields: [toUserId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MessageFrom {
  CREATOR
  EDITOR
}

model Message {
  id        String       @id @default(cuid())
  content   String
  chatId    String
  chat      Chat         @relation(fields: [chatId], references: [id])
  from      MessageFrom
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Chat {
  id        String    @id @default(cuid())
  messages  Message[]
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
